cmake_minimum_required(VERSION 2.8.3)
project(ros_datacentre_cpp_client)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  geometry_msgs
  ros_datacentre_msgs
  # pcl_ros
)

## System dependencies are found with CMake's conventions
find_package(Boost REQUIRED COMPONENTS system thread program_options filesystem)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependencies might have been
##     pulled in transitively but can be declared for certainty nonetheless:
##     * add a build_depend tag for "message_generation"
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   geometry_msgs#   ros_datacentre_msgs
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
 INCLUDE_DIRS include
 LIBRARIES message_store
#  CATKIN_DEPENDS geometry_msgs ros_datacentre_msgs
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(include)
include_directories(
  ${catkin_INCLUDE_DIRS}
)

## Declare a cpp library
# add_library(ros_datacentre_cpp_client
#   src/${PROJECT_NAME}/ros_datacentre_cpp_client.cpp
# )



add_definitions(-std=c++0x)

add_library(message_store src/message_store.cpp )

add_executable(example_ros_datacentre_cpp_client src/example_ros_datacentre_cpp_client.cpp)
add_executable(example_multi_event_log src/example_multi_event_log.cpp)
# add_executable(pc_test src/point_cloud_test.cpp)


## Add cmake target dependencies of the executable/library
## as an example, message headers may need to be generated before nodes

add_dependencies(example_ros_datacentre_cpp_client ros_datacentre_msgs_generate_messages_cpp )
add_dependencies(message_store ros_datacentre_msgs_generate_messages_cpp )

target_link_libraries(message_store
  mongoclient
  ${catkin_LIBRARIES}
  ${Boost_LIBRARIES}
)



# Specify libraries to link a library or executable target against
target_link_libraries(example_ros_datacentre_cpp_client
  message_store
  mongoclient
  ${catkin_LIBRARIES}
  ${Boost_LIBRARIES}
)

target_link_libraries(example_multi_event_log
  message_store
  mongoclient
  ${catkin_LIBRARIES}
  ${Boost_LIBRARIES}
)

target_link_libraries(example_multi_event_log
  message_store
  mongoclient
  ${catkin_LIBRARIES}
  ${Boost_LIBRARIES}
)

# target_link_libraries(pc_test
#    message_store
#   mongoclient
#   ${catkin_LIBRARIES}
#   ${Boost_LIBRARIES}
# )

catkin_add_gtest(ros_datacentre_cpp_test tests/ros_datacentre_cpp_test.cpp)

target_link_libraries(ros_datacentre_cpp_test
  message_store 
  mongoclient
  ${catkin_LIBRARIES}
  ${Boost_LIBRARIES}
)

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
install(TARGETS example_ros_datacentre_cpp_client example_multi_event_log message_store #pc_test
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

# Mark cpp header files for installation
install(DIRECTORY include/ros_datacentre/
  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
  FILES_MATCHING PATTERN "*.h"
  PATTERN ".svn" EXCLUDE
)

